
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  password: 'password',
  role: 'role',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  taxNumber: 'taxNumber',
  taxiLicenseNumber: 'taxiLicenseNumber',
  contactPersonName: 'contactPersonName',
  contactPersonEmail: 'contactPersonEmail',
  contactPersonPhone: 'contactPersonPhone',
  email: 'email',
  phone: 'phone',
  bankAccount: 'bankAccount',
  subscriptionType: 'subscriptionType',
  logo: 'logo',
  status: 'status',
  chironClientId: 'chironClientId',
  chironClientSecret: 'chironClientSecret',
  chironJwtTokenId: 'chironJwtTokenId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  licensePlate: 'licensePlate',
  brand: 'brand',
  model: 'model',
  year: 'year',
  color: 'color',
  taxiLicenseNumber: 'taxiLicenseNumber',
  insuranceExpiry: 'insuranceExpiry',
  keuringExpiry: 'keuringExpiry',
  pictures: 'pictures',
  status: 'status',
  taxiLightWebhookOnUrl: 'taxiLightWebhookOnUrl',
  taxiLightWebhookOffUrl: 'taxiLightWebhookOffUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  vehicleId: 'vehicleId',
  firstName: 'firstName',
  lastName: 'lastName',
  taxiDriverLicense: 'taxiDriverLicense',
  licenseExpiry: 'licenseExpiry',
  address: 'address',
  phone: 'phone',
  email: 'email',
  picture: 'picture',
  status: 'status',
  isOnline: 'isOnline',
  currentLatitude: 'currentLatitude',
  currentLongitude: 'currentLongitude',
  lastLocationUpdate: 'lastLocationUpdate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TariffScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  vehicleId: 'vehicleId',
  name: 'name',
  code: 'code',
  type: 'type',
  startPrice: 'startPrice',
  pricePerKm: 'pricePerKm',
  pricePerMinute: 'pricePerMinute',
  nightSurcharge: 'nightSurcharge',
  weekendSurcharge: 'weekendSurcharge',
  isActive: 'isActive',
  nightStartTime: 'nightStartTime',
  nightEndTime: 'nightEndTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  riderId: 'riderId',
  companyId: 'companyId',
  driverId: 'driverId',
  vehicleId: 'vehicleId',
  tariffId: 'tariffId',
  pickupLatitude: 'pickupLatitude',
  pickupLongitude: 'pickupLongitude',
  pickupAddress: 'pickupAddress',
  destinationLatitude: 'destinationLatitude',
  destinationLongitude: 'destinationLongitude',
  destinationAddress: 'destinationAddress',
  estimatedPrice: 'estimatedPrice',
  finalPrice: 'finalPrice',
  estimatedDuration: 'estimatedDuration',
  actualDuration: 'actualDuration',
  distance: 'distance',
  riderName: 'riderName',
  riderPhone: 'riderPhone',
  notes: 'notes',
  scheduledTime: 'scheduledTime',
  acceptedAt: 'acceptedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  cancelledAt: 'cancelledAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TripLogScalarFieldEnum = {
  id: 'id',
  parentId: 'parentId',
  logType: 'logType',
  companyId: 'companyId',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  userId: 'userId',
  bookingId: 'bookingId',
  startLatitude: 'startLatitude',
  startLongitude: 'startLongitude',
  startAddress: 'startAddress',
  endLatitude: 'endLatitude',
  endLongitude: 'endLongitude',
  endAddress: 'endAddress',
  distance: 'distance',
  duration: 'duration',
  finalPrice: 'finalPrice',
  tariffUsed: 'tariffUsed',
  governmentTripId: 'governmentTripId',
  tripStartApiSent: 'tripStartApiSent',
  tripEndApiSent: 'tripEndApiSent',
  apiErrorLog: 'apiErrorLog',
  logDetails: 'logDetails',
  tripStartTime: 'tripStartTime',
  tripEndTime: 'tripEndTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GovernmentApiRequestScalarFieldEnum = {
  id: 'id',
  tripLogId: 'tripLogId',
  requestType: 'requestType',
  endpoint: 'endpoint',
  payload: 'payload',
  response: 'response',
  statusCode: 'statusCode',
  success: 'success',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationUpdateScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  vehicleId: 'vehicleId',
  latitude: 'latitude',
  longitude: 'longitude',
  accuracy: 'accuracy',
  speed: 'speed',
  heading: 'heading',
  altitude: 'altitude',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  subscriptionType: 'subscriptionType',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  pricePerMonth: 'pricePerMonth',
  paymentProvider: 'paymentProvider',
  externalId: 'externalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  provider: 'provider',
  externalId: 'externalId',
  paymentMethod: 'paymentMethod',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  COMPANY_ADMIN: 'COMPANY_ADMIN',
  DRIVER: 'DRIVER',
  RIDER: 'RIDER'
};

exports.SubscriptionType = exports.$Enums.SubscriptionType = {
  BASIC: 'BASIC',
  PREMIUM: 'PREMIUM',
  ENTERPRISE: 'ENTERPRISE'
};

exports.CompanyStatus = exports.$Enums.CompanyStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  INACTIVE: 'INACTIVE'
};

exports.VehicleStatus = exports.$Enums.VehicleStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE'
};

exports.DriverStatus = exports.$Enums.DriverStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.TariffType = exports.$Enums.TariffType = {
  METER_BASED: 'METER_BASED',
  FIXED_BASED: 'FIXED_BASED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.LogType = exports.$Enums.LogType = {
  TRIP_START: 'TRIP_START',
  TRIP_END: 'TRIP_END',
  METER_ON: 'METER_ON',
  METER_OFF: 'METER_OFF',
  DRIVER_LOGIN: 'DRIVER_LOGIN',
  DRIVER_LOGOUT: 'DRIVER_LOGOUT',
  TARIFF_CHANGE: 'TARIFF_CHANGE',
  SYSTEM_EVENT: 'SYSTEM_EVENT',
  ERROR_LOG: 'ERROR_LOG'
};

exports.ApiRequestType = exports.$Enums.ApiRequestType = {
  TRIP_START: 'TRIP_START',
  TRIP_END: 'TRIP_END',
  DRIVER_REGISTRATION: 'DRIVER_REGISTRATION',
  VEHICLE_REGISTRATION: 'VEHICLE_REGISTRATION'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  SUSPENDED: 'SUSPENDED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Company: 'Company',
  CompanyUser: 'CompanyUser',
  Vehicle: 'Vehicle',
  Driver: 'Driver',
  Tariff: 'Tariff',
  Booking: 'Booking',
  TripLog: 'TripLog',
  GovernmentApiRequest: 'GovernmentApiRequest',
  LocationUpdate: 'LocationUpdate',
  Subscription: 'Subscription',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
